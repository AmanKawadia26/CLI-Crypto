// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\akawadia\Downloads\CryptoTracker\REST-API\middleware\middleware.go

// Package mock_middleware is a generated GoMock package.
package mock_middleware

import (
	middleware "cryptotracker/REST-API/middleware"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// BlacklistToken mocks base method.
func (m *MockTokenService) BlacklistToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BlacklistToken", token)
}

// BlacklistToken indicates an expected call of BlacklistToken.
func (mr *MockTokenServiceMockRecorder) BlacklistToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlacklistToken", reflect.TypeOf((*MockTokenService)(nil).BlacklistToken), token)
}

// ExtractToken mocks base method.
func (m *MockTokenService) ExtractToken(r *http.Request) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractToken", r)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExtractToken indicates an expected call of ExtractToken.
func (mr *MockTokenServiceMockRecorder) ExtractToken(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractToken", reflect.TypeOf((*MockTokenService)(nil).ExtractToken), r)
}

// GenerateToken mocks base method.
func (m *MockTokenService) GenerateToken(username, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockTokenServiceMockRecorder) GenerateToken(username, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockTokenService)(nil).GenerateToken), username, role)
}

// IsTokenBlacklisted mocks base method.
func (m *MockTokenService) IsTokenBlacklisted(token string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockTokenServiceMockRecorder) IsTokenBlacklisted(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockTokenService)(nil).IsTokenBlacklisted), token)
}

// ParseToken mocks base method.
func (m *MockTokenService) ParseToken(tokenString string) (*middleware.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString)
	ret0, _ := ret[0].(*middleware.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenServiceMockRecorder) ParseToken(tokenString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenService)(nil).ParseToken), tokenString)
}
