// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\akawadia\Downloads\CryptoTracker\internal\repositories\admin_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	models "cryptotracker/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// ChangeUserStatus mocks base method.
func (m *MockAdminRepository) ChangeUserStatus(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatus", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatus indicates an expected call of ChangeUserStatus.
func (mr *MockAdminRepositoryMockRecorder) ChangeUserStatus(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatus", reflect.TypeOf((*MockAdminRepository)(nil).ChangeUserStatus), username)
}

// DeleteUser mocks base method.
func (m *MockAdminRepository) DeleteUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminRepositoryMockRecorder) DeleteUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminRepository)(nil).DeleteUser), username)
}

// ManageSpecificCryptoRequests mocks base method.
func (m *MockAdminRepository) ManageSpecificCryptoRequests(cryptoSymbol string) ([]*models.UnavailableCryptoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageSpecificCryptoRequests", cryptoSymbol)
	ret0, _ := ret[0].([]*models.UnavailableCryptoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageSpecificCryptoRequests indicates an expected call of ManageSpecificCryptoRequests.
func (mr *MockAdminRepositoryMockRecorder) ManageSpecificCryptoRequests(cryptoSymbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageSpecificCryptoRequests", reflect.TypeOf((*MockAdminRepository)(nil).ManageSpecificCryptoRequests), cryptoSymbol)
}

// ManageUserRequests mocks base method.
func (m *MockAdminRepository) ManageUserRequests() ([]*models.UnavailableCryptoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageUserRequests")
	ret0, _ := ret[0].([]*models.UnavailableCryptoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageUserRequests indicates an expected call of ManageUserRequests.
func (mr *MockAdminRepositoryMockRecorder) ManageUserRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageUserRequests", reflect.TypeOf((*MockAdminRepository)(nil).ManageUserRequests))
}

// SaveUnavailableCryptoRequest mocks base method.
func (m *MockAdminRepository) SaveUnavailableCryptoRequest(requests []*models.UnavailableCryptoRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUnavailableCryptoRequest", requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUnavailableCryptoRequest indicates an expected call of SaveUnavailableCryptoRequest.
func (mr *MockAdminRepositoryMockRecorder) SaveUnavailableCryptoRequest(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUnavailableCryptoRequest", reflect.TypeOf((*MockAdminRepository)(nil).SaveUnavailableCryptoRequest), requests)
}

// ViewUserProfiles mocks base method.
func (m *MockAdminRepository) ViewUserProfiles() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUserProfiles")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUserProfiles indicates an expected call of ViewUserProfiles.
func (mr *MockAdminRepositoryMockRecorder) ViewUserProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUserProfiles", reflect.TypeOf((*MockAdminRepository)(nil).ViewUserProfiles))
}
