// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\akawadia\Downloads\CryptoTracker\internal\services\admin_services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "cryptotracker/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// ChangeUserStatus mocks base method.
func (m *MockAdminService) ChangeUserStatus(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserStatus", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserStatus indicates an expected call of ChangeUserStatus.
func (mr *MockAdminServiceMockRecorder) ChangeUserStatus(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserStatus", reflect.TypeOf((*MockAdminService)(nil).ChangeUserStatus), username)
}

// DeleteUser mocks base method.
func (m *MockAdminService) DeleteUser(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAdminServiceMockRecorder) DeleteUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAdminService)(nil).DeleteUser), username)
}

// ManageSpecificCryptoRequests mocks base method.
func (m *MockAdminService) ManageSpecificCryptoRequests(cryptoSymbol string) ([]*models.UnavailableCryptoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageSpecificCryptoRequests", cryptoSymbol)
	ret0, _ := ret[0].([]*models.UnavailableCryptoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageSpecificCryptoRequests indicates an expected call of ManageSpecificCryptoRequests.
func (mr *MockAdminServiceMockRecorder) ManageSpecificCryptoRequests(cryptoSymbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageSpecificCryptoRequests", reflect.TypeOf((*MockAdminService)(nil).ManageSpecificCryptoRequests), cryptoSymbol)
}

// ManageUserRequests mocks base method.
func (m *MockAdminService) ManageUserRequests() ([]*models.UnavailableCryptoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManageUserRequests")
	ret0, _ := ret[0].([]*models.UnavailableCryptoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManageUserRequests indicates an expected call of ManageUserRequests.
func (mr *MockAdminServiceMockRecorder) ManageUserRequests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageUserRequests", reflect.TypeOf((*MockAdminService)(nil).ManageUserRequests))
}

// UpdateRequestStatus mocks base method.
func (m *MockAdminService) UpdateRequestStatus(requests []*models.UnavailableCryptoRequest, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRequestStatus", requests, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRequestStatus indicates an expected call of UpdateRequestStatus.
func (mr *MockAdminServiceMockRecorder) UpdateRequestStatus(requests, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRequestStatus", reflect.TypeOf((*MockAdminService)(nil).UpdateRequestStatus), requests, status)
}

// ViewUserProfiles mocks base method.
func (m *MockAdminService) ViewUserProfiles() ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUserProfiles")
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUserProfiles indicates an expected call of ViewUserProfiles.
func (mr *MockAdminServiceMockRecorder) ViewUserProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUserProfiles", reflect.TypeOf((*MockAdminService)(nil).ViewUserProfiles))
}
