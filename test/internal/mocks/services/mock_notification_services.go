// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\akawadia\Downloads\CryptoTracker\internal\services\notification_services.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	services "cryptotracker/internal/services"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationService is a mock of NotificationService interface.
type MockNotificationService struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationServiceMockRecorder
}

// MockNotificationServiceMockRecorder is the mock recorder for MockNotificationService.
type MockNotificationServiceMockRecorder struct {
	mock *MockNotificationService
}

// NewMockNotificationService creates a new mock instance.
func NewMockNotificationService(ctrl *gomock.Controller) *MockNotificationService {
	mock := &MockNotificationService{ctrl: ctrl}
	mock.recorder = &MockNotificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationService) EXPECT() *MockNotificationServiceMockRecorder {
	return m.recorder
}

// CheckNotification mocks base method.
func (m *MockNotificationService) CheckNotification(username string) ([]services.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNotification", username)
	ret0, _ := ret[0].([]services.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNotification indicates an expected call of CheckNotification.
func (mr *MockNotificationServiceMockRecorder) CheckNotification(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNotification", reflect.TypeOf((*MockNotificationService)(nil).CheckNotification), username)
}

// CheckPriceAlertService mocks base method.
func (m *MockNotificationService) CheckPriceAlertService(username string) ([]services.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPriceAlertService", username)
	ret0, _ := ret[0].([]services.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPriceAlertService indicates an expected call of CheckPriceAlertService.
func (mr *MockNotificationServiceMockRecorder) CheckPriceAlertService(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPriceAlertService", reflect.TypeOf((*MockNotificationService)(nil).CheckPriceAlertService), username)
}

// CheckUnavailableCryptoRequestsService mocks base method.
func (m *MockNotificationService) CheckUnavailableCryptoRequestsService(username string) ([]services.Notification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnavailableCryptoRequestsService", username)
	ret0, _ := ret[0].([]services.Notification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUnavailableCryptoRequestsService indicates an expected call of CheckUnavailableCryptoRequestsService.
func (mr *MockNotificationServiceMockRecorder) CheckUnavailableCryptoRequestsService(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnavailableCryptoRequestsService", reflect.TypeOf((*MockNotificationService)(nil).CheckUnavailableCryptoRequestsService), username)
}
